
키바나(튜토리얼:https://logz.io/blog/kibana-tutorial/)

- 키바나는 ELK스택에서 시각화층을 담당하고있음.
- ELK스택 : 가장 인기있는 로그 분석 플랫폼. 
- 첫번재 파트는 루씬 쿼리 신택스로 키바나안에서 어떻게 검색을 실행하는지 설명한다.

1 키바나 안에서 데이터 로딩하기.
- 목적 : 24시간동안 발생한 아파치 로그데이터를 이용함.
  매일 새롭게 갱신된다. 이걸로  elk쪽으로 임포트시, 갱신된 오늘날짜의 데이터로 보이게됨.
  그래서 추가적인 데이터는 매일 같은 url에서 다운로드 받을 수 있어야함

-이 튜토리얼에서는 스스로 ELK stack운용한다.
- 그러나 간단히하기위해서 logz.io ELK를 이용한다. 

- 데이터 업로드 순서
(1) logz.io 계정생성 :  logz.io/signup/freetrial.html
(2) 데이터 다운 : https://logz.io/sample-data
(3) 데이터 업로드 : logshippingtab.* 내에서 file upload방법을 사용.  
    간단한 cURL명렁어를 이용한다.
    curl -T <Full path to file> http://listener.logz.io:8021/file_upload/<Token>/apache_access
(4) 몇분안에 파일업로드가 되고나면 키바나의 디스커버리탭이 보임
(5) 하나의 로그라인을 열고 리프레쉬 버튼 클릭하면 키바나의 매핑이 리프레쉬된다.
(6) 끝 그리고 너는  그리고 지금 키바나에서 약간의 데이터를 볼수있음 
토큰은 세팅페이지에서 찾을수잇고 파일의 타임은 apache_access임.

2 키바나 검색 신택스

 2-1 free-text search
- 프리 텍스트 서치는 그 _source 필드 포함하여 모든 필드에서 움직임
- 서치안에 가리켜지는 특정필드가없으면,서치는 모든 필드에서 대해 분석되어짐
- 디스커버리 서치 필드 내에 있는 팔로윙 서치를 실행한다. 그리고 얻는 것을 본다.
(그리고 시간파라미터를 세팅함. 대쉬모드 오른쪽위에있는데 12시간동안 보다 이전으로해서 좀더 많은 데이터를 잡아둔다)

  1 텍스트 서치들은 case에 민감하지않음.
    이 의미는 [category]와 [CaTeGory] 는 같은 결과임. 
    하지만, z큰따옴표 두개안의 텍스트는 정확히 일치하는 것만 가져온다.
    예를들어, [category\/healthy] 와 ["category/health"] 는 다른결과 임
  2 와일드 카드 tkdwld [*] 혹은 [?]를 검색안에서 사용할 수 있음
  [*] 뜻은 캐릭터의 몇개의 캐릭터이고 [?]는 하나의 캐릭터만.
  
  2-2 field-level searches
 - 키바나에서 , 특별한 필드안에 있는 데이터를 서치할 수 있음
 - 다음 포맷형태로 된 구문이 필요함
   <fieldname>:search
  예 : geoip.country_name:Canada
       name:chrome
       name:Chrome
       name:Chr*
       response:200
       bytes:65
       bytes:[65 TO *]
       bytes:[65 TO 99]       
       bytes:{65 TO 99}
       _exists_:name
 
  * 일부 결과가없을수도잇음     
  (1) 필드레벨의 서치는 필드 타입에 의존함.
  디폴트로 모든 필드가 분석되어지진 않음. 서치들은 케이스-센서티브이고, 와일드카드 서치를 사용하지 않는다는 것임.
  그 이유는 인댁스안에 덜분석되어진체로 모든 필드를 저장한다.
  왜냐면 데이터는 _source라고 불리는 분석된 필드안에 복제되어짐
  (2) 필드안에서 범위를 검색할수 있음.
      만약 [] 브라켓을 사용한다면, 이것은 결과가 포함된다는 의미임.
      아니면 {}를 사용하면 이것은 결과 제외라는 뜻

  (3) _exists_를 사용하여 필드에 미리 픽스하는 것은 문서를 보게 검색해준다. 만약 필드가 존재한다면
  
  (4) 범위를 사용할때, 매우 엄격한 포맷이 필요하고 범위 명시할때 TO대문자를 써야함 
 

 
 2-3 logical statements
 다음과 같은 방법으로 로지컬 구문을 사용함
 - USA AND Firefox
 - USA OR Firefox
 - (USA AND Firefox) OR Windows
 - -USA
 - !USA
 - +USA
 - NOT USA
 
 위를 이해하려면
 
  (1) 적절한 포맷사용이필요함. 예: 대문자로 로지컬텀즈를 정의할때 AND, OR
  (2) 복잡한 로지컬 구문정의할땐 괄호 이용
  (3) -, !, NOT은 부정적인 용어에 사용한다.
 
 
 
 2-4 escaping special characters
 모든 스패셜문자는 적절한 이스케이프를 할때 필요되어짐.
 이것은 다음과 같은 문자로 가능하다.
 + - && || ! () {}[]^"~*?:\
 
 
3. advanced searches

3-1 근접검색
근접검색은 키바나의 고급 기능임. 
루씬 쿼리 언어를 쓴다는 장점을 가짐

3-2 근접검색 사용하기
(1) [categovi~2]  뜻은 모든 텀에 대한 검색임
  [categovi]에서 두개의 변화안에있음 
   모든 카테고리가 매치될수 있다는 뜻

(2) 근접검색은 시스템리소스를 마니씀.
그리고 종종 엘라스틱서치 내에서 내부트리거 순환 브레이커를 일으킴
 만약 [catefujt~10], 과같은것을 시도한다면
 특정한 검색을 수행할려고 사용할 많은 메모리때문에 어떤결과도 반환하지 않을것같다.
 
  
  